<!DOCTYPE html>
<!-- saved from url=(0083)https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
  <link rel="dns-prefetch" href="https://assets-cdn.github.com/">
  <link rel="dns-prefetch" href="https://avatars0.githubusercontent.com/">
  <link rel="dns-prefetch" href="https://avatars1.githubusercontent.com/">
  <link rel="dns-prefetch" href="https://avatars2.githubusercontent.com/">
  <link rel="dns-prefetch" href="https://avatars3.githubusercontent.com/">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com/">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">



  <link crossorigin="anonymous" media="all" integrity="sha512-eYhUAIv4O/68uoHkCtYXVTxc5Q92+NKMtOryYR5Svt7vDp34XkrggN5j4lrKyiB0B2HUyrAYvAb3tlhmFGhivg==" rel="stylesheet" href="./README.md_files/frameworks-592c4aa40e940d1b0607a3cf272916ff.css">
  <link crossorigin="anonymous" media="all" integrity="sha512-LUrF+o8wSTstABZwkJhSTy+PQCtGPf92OmcqBwdTsQyKTZ3JTXFyiTiLtXX2/PUT7ofgLcU5FNcBN7E+RQlWGQ==" rel="stylesheet" href="./README.md_files/github-96ebb1551fc5dba84c6d2a0fa7b1cfcf.css">
  
  
  
  

  <meta name="viewport" content="width=device-width">
  
  <title>opencv-face-recognition-python/README.md at master · informramiz/opencv-face-recognition-python</title>
    <meta name="description" content="GitHub is where people build software. More than 27 million people use GitHub to discover, fork, and contribute to over 80 million projects.">
  <link rel="search" type="application/opensearchdescription+xml" href="https://github.com/opensearch.xml" title="GitHub">
  <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
  <meta property="fb:app_id" content="1401488693436528">

    
    <meta property="og:image" content="https://avatars0.githubusercontent.com/u/2450820?s=400&amp;v=4"><meta property="og:site_name" content="GitHub"><meta property="og:type" content="object"><meta property="og:title" content="informramiz/opencv-face-recognition-python"><meta property="og:url" content="https://github.com/informramiz/opencv-face-recognition-python"><meta property="og:description" content="opencv-face-recognition-python - Face Recognition using OpenCV and Python. ">

  <link rel="assets" href="https://assets-cdn.github.com/">
  <link rel="web-socket" href="wss://live.github.com/_sockets/VjI6MjYwNjE1MjUwOjliNmI3Nzk2ZGFmZWM0MWJhODgyMTY5YmNhMTAzMjQxMjAwMzNhYjdhMzVkMGRjMjc4MGU1NDIzZjUzY2MzYjY=--1f9bc0d4a9a6658483c52f585cd4171dfbef4bfa">
  <meta name="pjax-timeout" content="1000">
  <link rel="sudo-modal" href="https://github.com/sessions/sudo_modal">
  


  

  

    <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
  <meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
  <meta name="google-site-verification" content="GXs5KoUUkNCoaAZn7wPN-t01Pywp9M3sEjnt_3_ZWPc">
    <meta name="google-analytics" content="UA-3769691-2">

<meta name="octolytics-host" content="collector.githubapp.com"><meta name="octolytics-app-id" content="github"><meta name="octolytics-event-url" content="https://collector.githubapp.com/github-external/browser_event"><meta name="octolytics-dimension-request_id" content="BD3B:1655:20D4C5F:3BB3BFD:5AD15AE1"><meta name="octolytics-dimension-region_edge" content="iad"><meta name="octolytics-dimension-region_render" content="iad"><meta name="octolytics-actor-id" content="26576840"><meta name="octolytics-actor-login" content="boubli"><meta name="octolytics-actor-hash" content="8d58bd5f23338e3afb46f9f627b63b37c4f8034b30b88798193f5af1bb425f47">





  <meta class="js-ga-set" name="dimension1" content="Logged In">


  

      <meta name="hostname" content="github.com">
    <meta name="user-login" content="boubli">

      <meta name="expected-hostname" content="github.com">
    <meta name="js-proxy-site-detection-payload" content="NzYwMzg5Mzk4YzA4NWY3ZWRlMTc1ZTUwNTI3MWFmZmI0OTM3NDVmNDdiYTZhZGY1ZDFhZWM4NzJhNTE2NDU4ZXx7InJlbW90ZV9hZGRyZXNzIjoiMTk2Ljg3LjEwMy4zNyIsInJlcXVlc3RfaWQiOiJCRDNCOjE2NTU6MjBENEM1RjozQkIzQkZEOjVBRDE1QUUxIiwidGltZXN0YW1wIjoxNTIzNjY5NzQ4LCJob3N0IjoiZ2l0aHViLmNvbSJ9">

    <meta name="enabled-features" content="UNIVERSE_BANNER,FREE_TRIALS,MARKETPLACE_INSIGHTS,MARKETPLACE_SELF_SERVE,MARKETPLACE_INSIGHTS_CONVERSION_PERCENTAGES">

  <meta name="html-safe-nonce" content="a8bff0c47bd53757253a7ff450a320596a7caab4">

  <meta http-equiv="x-pjax-version" content="89a4b3d4dd5891451d8dc82a0d6030b7">
  

      <link href="https://github.com/informramiz/opencv-face-recognition-python/commits/master.atom" rel="alternate" title="Recent Commits to opencv-face-recognition-python:master" type="application/atom+xml">

  <meta name="description" content="opencv-face-recognition-python - Face Recognition using OpenCV and Python. ">
  <meta name="go-import" content="github.com/informramiz/opencv-face-recognition-python git https://github.com/informramiz/opencv-face-recognition-python.git">

  <meta name="octolytics-dimension-user_id" content="2450820"><meta name="octolytics-dimension-user_login" content="informramiz"><meta name="octolytics-dimension-repository_id" content="97127105"><meta name="octolytics-dimension-repository_nwo" content="informramiz/opencv-face-recognition-python"><meta name="octolytics-dimension-repository_public" content="true"><meta name="octolytics-dimension-repository_is_fork" content="false"><meta name="octolytics-dimension-repository_network_root_id" content="97127105"><meta name="octolytics-dimension-repository_network_root_nwo" content="informramiz/opencv-face-recognition-python"><meta name="octolytics-dimension-repository_explore_github_marketplace_ci_cta_shown" content="false">


    


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://assets-cdn.github.com/pinned-octocat.svg" color="#000000">
  <link rel="icon" type="image/x-icon" class="js-site-favicon" href="https://assets-cdn.github.com/favicon.ico">

<meta name="theme-color" content="#1e2327">


  <meta name="u2f-support" content="true">

<link rel="manifest" href="https://github.com/manifest.json" crossorigin="use-credentials">

  <meta name="selected-link" value="repo_source" data-pjax-transient="true"><meta name="analytics-location" content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-pjax-transient="true"><meta name="request-id" content="BA5E:1653:15459E9:28BC21B:5AD15AF6" data-pjax-transient="true"><link rel="canonical" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md" data-pjax-transient="true"><link href="https://github.com/informramiz/opencv-face-recognition-python/commits/master.atom" rel="alternate" title="Recent Commits to opencv-face-recognition-python:master" type="application/atom+xml" data-pjax-transient="true"></head>

  <body class="logged-in env-production emoji-size-boost intent-mouse">
    

  <div class="position-relative js-header-wrapper ">
    <a href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#start-of-content" tabindex="1" class="p-3 bg-blue text-white show-on-focus js-skip-to-content">Skip to content</a>
    <div id="js-pjax-loader-bar" class="pjax-loader-bar"><div class="progress" style="transition: width 0.4s ease 0s; width: 100%;"></div></div>

    
    
    



        
<header class="Header  f5" role="banner">
  <div class="d-flex flex-justify-between px-3 container-lg">
    <div class="d-flex flex-justify-between ">
      <div class="">
        <a class="header-logo-invertocat" href="https://github.com/" data-hotkey="g d" aria-label="Homepage" data-ga-click="Header, go to dashboard, icon:logo">
  <svg height="32" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="32" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"></path></svg>
</a>

      </div>

    </div>

    <div class="HeaderMenu d-flex flex-justify-between flex-auto">
      <div class="d-flex">
            <div class="">
              <div class="header-search scoped-search site-scoped-search js-site-search" role="search">
  <!-- '"` --><!-- </textarea></xmp> --><form class="js-site-search-form" data-scoped-search-url="/informramiz/opencv-face-recognition-python/search" data-unscoped-search-url="/search" action="https://github.com/informramiz/opencv-face-recognition-python/search" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="✓">
    <label class="form-control header-search-wrapper  js-chromeless-input-container">
          <a class="header-search-scope no-underline" href="https://github.com/informramiz/opencv-face-recognition-python">This repository</a>
      <input type="text" class="form-control header-search-input  js-site-search-focus js-site-search-field is-clearable" data-hotkey="s,/" name="q" value="" placeholder="Search" aria-label="Search this repository" data-unscoped-placeholder="Search GitHub" data-scoped-placeholder="Search" autocapitalize="off">
        <input type="hidden" class="js-site-search-type-field" name="type">
    </label>
</form></div>

            </div>

          <ul class="d-flex pl-2 flex-items-center text-bold list-style-none" role="navigation">
            <li>
              <a class="js-selected-navigation-item HeaderNavlink px-2" data-hotkey="g p" data-ga-click="Header, click, Nav menu - item:pulls context:user" aria-label="Pull requests you created" data-selected-links="/pulls /pulls/assigned /pulls/mentioned /pulls" href="https://github.com/pulls">
                Pull requests
</a>            </li>
            <li>
              <a class="js-selected-navigation-item HeaderNavlink px-2" data-hotkey="g i" data-ga-click="Header, click, Nav menu - item:issues context:user" aria-label="Issues you created" data-selected-links="/issues /issues/assigned /issues/mentioned /issues" href="https://github.com/issues">
                Issues
</a>            </li>
                <li>
                  <a class="js-selected-navigation-item HeaderNavlink px-2" data-ga-click="Header, click, Nav menu - item:marketplace context:user" data-selected-links=" /marketplace" href="https://github.com/marketplace">
                    Marketplace
</a>                </li>
            <li>
              <a class="js-selected-navigation-item HeaderNavlink px-2" data-ga-click="Header, click, Nav menu - item:explore" data-selected-links="/explore /trending /trending/developers /integrations /integrations/feature/code /integrations/feature/collaborate /integrations/feature/ship showcases showcases_search showcases_landing /explore" href="https://github.com/explore">
                Explore
</a>            </li>
          </ul>
      </div>

      <div class="d-flex">
        
<ul class="user-nav d-flex flex-items-center list-style-none" id="user-links">
  <li class="dropdown js-menu-container">
    <span class="d-inline-block  px-2">
      
    <a aria-label="You have no unread notifications" class="notification-indicator tooltipped tooltipped-s  js-socket-channel js-notification-indicator" data-hotkey="g n" data-ga-click="Header, go to notifications, icon:read" data-channel="notification-changed:26576840" href="https://github.com/notifications">
        <span class="mail-status "></span>
        <svg class="octicon octicon-bell" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M14 12v1H0v-1l.73-.58c.77-.77.81-2.55 1.19-4.42C2.69 3.23 6 2 6 2c0-.55.45-1 1-1s1 .45 1 1c0 0 3.39 1.23 4.16 5 .38 1.88.42 3.66 1.19 4.42l.66.58H14zm-7 4c1.11 0 2-.89 2-2H5c0 1.11.89 2 2 2z"></path></svg>
</a>
    </span>
  </li>

  <li class="dropdown js-menu-container">
    <details class="dropdown-details details-reset js-dropdown-details d-flex px-2 flex-items-center">
      <summary class="HeaderNavlink" aria-label="Create new…" data-ga-click="Header, create new, icon:add">
        <svg class="octicon octicon-plus float-left mr-1 mt-1" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 9H7v5H5V9H0V7h5V2h2v5h5z"></path></svg>
        <span class="dropdown-caret mt-1"></span>
      </summary>

      <ul class="dropdown-menu dropdown-menu-sw">
        
<a class="dropdown-item" href="https://github.com/new" data-ga-click="Header, create new repository">
  New repository
</a>

  <a class="dropdown-item" href="https://github.com/new/import" data-ga-click="Header, import a repository">
    Import repository
  </a>

<a class="dropdown-item" href="https://gist.github.com/" data-ga-click="Header, create new gist">
  New gist
</a>

  <a class="dropdown-item" href="https://github.com/organizations/new" data-ga-click="Header, create new organization">
    New organization
  </a>



  <div class="dropdown-divider"></div>
  <div class="dropdown-header">
    <span title="informramiz/opencv-face-recognition-python">This repository</span>
  </div>
    <a class="dropdown-item" href="https://github.com/informramiz/opencv-face-recognition-python/issues/new" data-ga-click="Header, create new issue">
      New issue
    </a>

      </ul>
    </details>
  </li>

  <li class="dropdown js-menu-container">

    <details class="dropdown-details details-reset js-dropdown-details d-flex pl-2 flex-items-center">
      <summary class="HeaderNavlink name mt-1" aria-label="View profile and more" data-ga-click="Header, show menu, icon:avatar">
        <img alt="@boubli" class="avatar float-left mr-1" src="./README.md_files/26576840" height="20" width="20">
        <span class="dropdown-caret"></span>
      </summary>

      <ul class="dropdown-menu dropdown-menu-sw">
        <li class="dropdown-header header-nav-current-user css-truncate">
          Signed in as <strong class="css-truncate-target">boubli</strong>
        </li>

        <li class="dropdown-divider"></li>

        <li><a class="dropdown-item" href="https://github.com/boubli" data-ga-click="Header, go to profile, text:your profile">
          Your profile
        </a></li>
        <li><a class="dropdown-item" href="https://github.com/boubli?tab=stars" data-ga-click="Header, go to starred repos, text:your stars">
          Your stars
        </a></li>
          <li><a class="dropdown-item" href="https://gist.github.com/" data-ga-click="Header, your gists, text:your gists">Your gists</a></li>

        <li class="dropdown-divider"></li>

        <li><a class="dropdown-item" href="https://help.github.com/" data-ga-click="Header, go to help, text:help">
          Help
        </a></li>

        <li><a class="dropdown-item" href="https://github.com/settings/profile" data-ga-click="Header, go to settings, icon:settings">
          Settings
        </a></li>

        <li><!-- '"` --><!-- </textarea></xmp> --><form class="logout-form" action="https://github.com/logout" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="✓"><input type="hidden" name="authenticity_token" value="CjzVhru7xguLi5XUxoe16YGTgn5aSB8rUJWfc7R7SWEEWjfhcsukJEMboaxbUePMbA20k0n4vFCAd+RK6BLIKA==">
          <button type="submit" class="dropdown-item dropdown-signout" data-ga-click="Header, sign out, icon:logout">
            Sign out
          </button>
        </form></li>
      </ul>
    </details>
  </li>
</ul>



        <!-- '"` --><!-- </textarea></xmp> --><form class="sr-only right-0" action="https://github.com/logout" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="✓"><input type="hidden" name="authenticity_token" value="7N+rFk+c5ON+r/UsCgk6oXzSjWpFV0M2x+o5bap+g4LiuUlxhuyGzLY/wVSX32yEkUy7h1bn4E0XCEJU9hcCyw==">
          <button type="submit" class="dropdown-item dropdown-signout" data-ga-click="Header, sign out, icon:logout">
            Sign out
          </button>
</form>      </div>
    </div>
  </div>
</header>

      

  </div>

  <div id="start-of-content" class="show-on-focus"></div>

    <div id="js-flash-container">
</div>



  <div role="main" class="application-main ">
        <div itemscope="" itemtype="http://schema.org/SoftwareSourceCode" class="">
    <div id="js-repo-pjax-container" data-pjax-container=""><div class="pagehead repohead instapaper_ignore readability-menu experiment-repo-nav  ">
    <div class="repohead-details-container clearfix container">

      <ul class="pagehead-actions">
  <li>
        <!-- '"` --><!-- </textarea></xmp> --><form data-autosubmit="true" data-remote="true" class="js-social-container" action="https://github.com/notifications/subscribe" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="✓"><input type="hidden" name="authenticity_token" value="nbT0RqKVDPRAxmEdwaWdOesvRwdZ4uEH8t/K0uOCKtyulWLv+nlZaQXO4qKKjApratYpcT/AMckXz4aAFeBg9A==">      <input type="hidden" name="repository_id" id="repository_id" value="97127105" class="form-control">

        <div class="select-menu js-menu-container js-select-menu">
          <a href="https://github.com/informramiz/opencv-face-recognition-python/subscription" class="btn btn-sm btn-with-count select-menu-button js-menu-target" role="button" aria-haspopup="true" aria-expanded="false" aria-label="Toggle repository notifications menu" data-ga-click="Repository, click Watch settings, action:blob#show">
            <span class="js-select-button">
                <svg class="octicon octicon-eye" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"></path></svg>
                Watch
            </span>
          </a>
          <a class="social-count js-social-count" href="https://github.com/informramiz/opencv-face-recognition-python/watchers" aria-label="12 users are watching this repository">
            12
          </a>

        <div class="select-menu-modal-holder">
          <div class="select-menu-modal subscription-menu-modal js-menu-content">
            <div class="select-menu-header js-navigation-enable" tabindex="-1">
              <svg class="octicon octicon-x js-menu-close" role="img" aria-label="Close" viewBox="0 0 12 16" version="1.1" width="12" height="16"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"></path></svg>
              <span class="select-menu-title">Notifications</span>
            </div>

              <div class="select-menu-list js-navigation-container" role="menu">

                <div class="select-menu-item js-navigation-item selected" role="menuitem" tabindex="0">
                  <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"></path></svg>
                  <div class="select-menu-item-text">
                    <input type="radio" name="do" id="do_included" value="included" checked="checked">
                    <span class="select-menu-item-heading">Not watching</span>
                    <span class="description">Be notified when participating or @mentioned.</span>
                    <span class="js-select-button-text hidden-select-button-text">
                      <svg class="octicon octicon-eye" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"></path></svg>
                      Watch
                    </span>
                  </div>
                </div>

                <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
                  <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"></path></svg>
                  <div class="select-menu-item-text">
                    <input type="radio" name="do" id="do_subscribed" value="subscribed">
                    <span class="select-menu-item-heading">Watching</span>
                    <span class="description">Be notified of all conversations.</span>
                    <span class="js-select-button-text hidden-select-button-text">
                      <svg class="octicon octicon-eye" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"></path></svg>
                        Unwatch
                    </span>
                  </div>
                </div>

                <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
                  <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"></path></svg>
                  <div class="select-menu-item-text">
                    <input type="radio" name="do" id="do_ignore" value="ignore">
                    <span class="select-menu-item-heading">Ignoring</span>
                    <span class="description">Never be notified.</span>
                    <span class="js-select-button-text hidden-select-button-text">
                      <svg class="octicon octicon-mute" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 2.81v10.38c0 .67-.81 1-1.28.53L3 10H1c-.55 0-1-.45-1-1V7c0-.55.45-1 1-1h2l3.72-3.72C7.19 1.81 8 2.14 8 2.81zm7.53 3.22l-1.06-1.06-1.97 1.97-1.97-1.97-1.06 1.06L11.44 8 9.47 9.97l1.06 1.06 1.97-1.97 1.97 1.97 1.06-1.06L13.56 8l1.97-1.97z"></path></svg>
                        Stop ignoring
                    </span>
                  </div>
                </div>

              </div>

            </div>
          </div>
        </div>
</form>
  </li>

  <li>
    
  <div class="js-toggler-container js-social-container starring-container ">
    <!-- '"` --><!-- </textarea></xmp> --><form class="starred js-social-form" action="https://github.com/informramiz/opencv-face-recognition-python/unstar" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="✓"><input type="hidden" name="authenticity_token" value="RbAyuz13pcCMbcBwxb14sKzvl99aQVQcuaeK0nfBdZ8x0aoaQYirb/y6gOFXip8TE5CGFQH/hEqyCLZkx9vwew==">
      <input type="hidden" name="context" value="repository">
      <button type="submit" class="btn btn-sm btn-with-count js-toggler-target" aria-label="Unstar this repository" title="Unstar informramiz/opencv-face-recognition-python" data-ga-click="Repository, click unstar button, action:blob#show; text:Unstar">
        <svg class="octicon octicon-star" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74z"></path></svg>
        Unstar
      </button>
        <a class="social-count js-social-count" href="https://github.com/informramiz/opencv-face-recognition-python/stargazers" aria-label="97 users starred this repository">
          97
        </a>
</form>
    <!-- '"` --><!-- </textarea></xmp> --><form class="unstarred js-social-form" action="https://github.com/informramiz/opencv-face-recognition-python/star" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="✓"><input type="hidden" name="authenticity_token" value="9KsedjNaSJUYmwP2wi6/EdieppumkfrYpDO+1cMigpizjP7SYgFXSEH/Vu7UmDL22KLp+Z7KOJWb1UVaTTEF/A==">
      <input type="hidden" name="context" value="repository">
      <button type="submit" class="btn btn-sm btn-with-count js-toggler-target" aria-label="Star this repository" title="Star informramiz/opencv-face-recognition-python" data-ga-click="Repository, click star button, action:blob#show; text:Star">
        <svg class="octicon octicon-star" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74z"></path></svg>
        Star
      </button>
        <a class="social-count js-social-count" href="https://github.com/informramiz/opencv-face-recognition-python/stargazers" aria-label="97 users starred this repository">
          97
        </a>
</form>  </div>

  </li>

  <li>
          <!-- '"` --><!-- </textarea></xmp> --><form class="btn-with-count" action="https://github.com/informramiz/opencv-face-recognition-python/fork" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="✓"><input type="hidden" name="authenticity_token" value="y7NEyalCFxZ1NZmbe8bj+0VvoNvfqa2rFFOs8rOIGATEWbjk7SlBPQLL5wBirS4c3KsHeXXRmXx1EJgaA5xjDw==">
            <button type="submit" class="btn btn-sm btn-with-count" data-ga-click="Repository, show fork modal, action:blob#show; text:Fork" title="Fork your own copy of informramiz/opencv-face-recognition-python to your account" aria-label="Fork your own copy of informramiz/opencv-face-recognition-python to your account">
              <svg class="octicon octicon-repo-forked" viewBox="0 0 10 16" version="1.1" width="10" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 1a1.993 1.993 0 0 0-1 3.72V6L5 8 3 6V4.72A1.993 1.993 0 0 0 2 1a1.993 1.993 0 0 0-1 3.72V6.5l3 3v1.78A1.993 1.993 0 0 0 5 15a1.993 1.993 0 0 0 1-3.72V9.5l3-3V4.72A1.993 1.993 0 0 0 8 1zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3 10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3-10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"></path></svg>
              Fork
            </button>
</form>
    <a href="https://github.com/informramiz/opencv-face-recognition-python/network" class="social-count" aria-label="69 users forked this repository">
      69
    </a>
  </li>
</ul>

      <h1 class="public ">
  <svg class="octicon octicon-repo" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"></path></svg>
  <span class="author" itemprop="author"><a class="url fn" rel="author" href="https://github.com/informramiz">informramiz</a></span><!--
--><span class="path-divider">/</span><!--
--><strong itemprop="name"><a data-pjax="#js-repo-pjax-container" href="https://github.com/informramiz/opencv-face-recognition-python">opencv-face-recognition-python</a></strong>

</h1>

    </div>
    
<nav class="reponav js-repo-nav js-sidenav-container-pjax container" itemscope="" itemtype="http://schema.org/BreadcrumbList" role="navigation" data-pjax="#js-repo-pjax-container">

  <span itemscope="" itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a class="js-selected-navigation-item selected reponav-item" itemprop="url" data-hotkey="g c" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages /informramiz/opencv-face-recognition-python" href="https://github.com/informramiz/opencv-face-recognition-python">
      <svg class="octicon octicon-code" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z"></path></svg>
      <span itemprop="name">Code</span>
      <meta itemprop="position" content="1">
</a>  </span>

    <span itemscope="" itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a itemprop="url" data-hotkey="g i" class="js-selected-navigation-item reponav-item" data-selected-links="repo_issues repo_labels repo_milestones /informramiz/opencv-face-recognition-python/issues" href="https://github.com/informramiz/opencv-face-recognition-python/issues">
        <svg class="octicon octicon-issue-opened" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg>
        <span itemprop="name">Issues</span>
        <span class="Counter">10</span>
        <meta itemprop="position" content="2">
</a>    </span>

  <span itemscope="" itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a data-hotkey="g p" itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="repo_pulls checks /informramiz/opencv-face-recognition-python/pulls" href="https://github.com/informramiz/opencv-face-recognition-python/pulls">
      <svg class="octicon octicon-git-pull-request" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"></path></svg>
      <span itemprop="name">Pull requests</span>
      <span class="Counter">1</span>
      <meta itemprop="position" content="3">
</a>  </span>

    <a data-hotkey="g b" class="js-selected-navigation-item reponav-item" data-selected-links="repo_projects new_repo_project repo_project /informramiz/opencv-face-recognition-python/projects" href="https://github.com/informramiz/opencv-face-recognition-python/projects">
      <svg class="octicon octicon-project" viewBox="0 0 15 16" version="1.1" width="15" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M10 12h3V2h-3v10zm-4-2h3V2H6v8zm-4 4h3V2H2v12zm-1 1h13V1H1v14zM14 0H1a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h13a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1z"></path></svg>
      Projects
      <span class="Counter">0</span>
</a>
    <a class="js-selected-navigation-item reponav-item" data-hotkey="g w" data-selected-links="repo_wiki /informramiz/opencv-face-recognition-python/wiki" href="https://github.com/informramiz/opencv-face-recognition-python/wiki">
      <svg class="octicon octicon-book" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M3 5h4v1H3V5zm0 3h4V7H3v1zm0 2h4V9H3v1zm11-5h-4v1h4V5zm0 2h-4v1h4V7zm0 2h-4v1h4V9zm2-6v9c0 .55-.45 1-1 1H9.5l-1 1-1-1H2c-.55 0-1-.45-1-1V3c0-.55.45-1 1-1h5.5l1 1 1-1H15c.55 0 1 .45 1 1zm-8 .5L7.5 3H2v9h6V3.5zm7-.5H9.5l-.5.5V12h6V3z"></path></svg>
      Wiki
</a>

  <a class="js-selected-navigation-item reponav-item" data-selected-links="repo_graphs repo_contributors dependency_graph pulse /informramiz/opencv-face-recognition-python/pulse" href="https://github.com/informramiz/opencv-face-recognition-python/pulse">
    <svg class="octicon octicon-graph" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M16 14v1H0V0h1v14h15zM5 13H3V8h2v5zm4 0H7V3h2v10zm4 0h-2V6h2v7z"></path></svg>
    Insights
</a>

</nav>


  </div><div class="container new-discussion-timeline experiment-repo-nav  ">
  <div class="repository-content ">

    
  <a class="d-none js-permalink-shortcut" data-hotkey="y" href="https://github.com/informramiz/opencv-face-recognition-python/blob/0edc6e061d7c2983b37b4e1ccbd2d1c86b7d5473/README.md">Permalink</a>

  <!-- blob contrib key: blob_contributors:v21:b3f2268d9f9f27a48085c9bd10f01f31 -->

  <div class="file-navigation">
    
<div class="select-menu branch-select-menu js-menu-container js-select-menu float-left">
  <button class=" btn btn-sm select-menu-button js-menu-target css-truncate" data-hotkey="w" type="button" aria-label="Switch branches or tags" aria-expanded="false" aria-haspopup="true">
      <i>Branch:</i>
      <span class="js-select-button css-truncate-target">master</span>
  </button>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax="">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <svg class="octicon octicon-x js-menu-close" role="img" aria-label="Close" viewBox="0 0 12 16" version="1.1" width="12" height="16"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"></path></svg>
        <span class="select-menu-title">Switch branches/tags</span>
      </div>

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="form-control js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#" data-tab-filter="branches" data-filter-placeholder="Filter branches/tags" class="js-select-menu-tab" role="tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#" data-tab-filter="tags" data-filter-placeholder="Find a tag…" class="js-select-menu-tab" role="tab">Tags</a>
            </li>
          </ul>
        </div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches" role="menu">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open selected" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md" data-name="master" data-skip-pjax="true" rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"></path></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                master
              </span>
            </a>
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div>

    </div>
  </div>
</div>

    <div class="BtnGroup float-right">
      <a href="https://github.com/informramiz/opencv-face-recognition-python/find/master" class="js-pjax-capture-input btn btn-sm BtnGroup-item" data-pjax="" data-hotkey="t">
        Find file
      </a>
      <clipboard-copy for="blob-path" aria-label="Copy file path to clipboard" class="btn btn-sm BtnGroup-item tooltipped tooltipped-s" copied-label="Copied!" tabindex="0" role="button">
        Copy path
      </clipboard-copy>
    </div>
    <div id="blob-path" class="breadcrumb">
      <span class="repo-root js-repo-root"><span class="js-path-segment"><a data-pjax="true" href="https://github.com/informramiz/opencv-face-recognition-python"><span>opencv-face-recognition-python</span></a></span></span><span class="separator">/</span><strong class="final-path">README.md</strong>
    </div>
  </div>


  

  <div class="commit-tease">
      <span class="float-right">
        <a class="commit-tease-sha" href="https://github.com/informramiz/opencv-face-recognition-python/commit/fd1c0d0b3c0a26d3d79e5d6a7e2bcb0ce7407d6f" data-pjax="">
          fd1c0d0
        </a>
        <relative-time datetime="2017-07-20T00:13:27Z" title="Jul 20, 2017, 1:13 AM GMT+1">on Jul 20, 2017</relative-time>
      </span>
      <div>
        <a rel="author" data-skip-pjax="true" href="https://github.com/informramiz"><img class="avatar" src="./README.md_files/2450820" width="20" height="20" alt="@informramiz" data-hovercard-user-id="2450820"></a>
        <a class="user-mention" rel="author" data-hovercard-user-id="2450820" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/informramiz" aria-describedby="hovercard-aria-description">informramiz</a>
          <a data-pjax="true" title="docs: Update ReadMe.md to fix missing images links" class="message" href="https://github.com/informramiz/opencv-face-recognition-python/commit/fd1c0d0b3c0a26d3d79e5d6a7e2bcb0ce7407d6f">docs: Update ReadMe.md to fix missing images links</a>
      </div>

    <div class="commit-tease-contributors">
      <button type="button" class="btn-link muted-link contributors-toggle" data-facebox="#blob_contributors_box">
        <strong>1</strong>
         contributor
      </button>
      
    </div>

    <div id="blob_contributors_box" style="display:none">
      <h2 class="facebox-header" data-facebox-id="facebox-header">Users who have contributed to this file</h2>
      <ul class="facebox-user-list" data-facebox-id="facebox-description">
          <li class="facebox-user-list-item">
            <img src="./README.md_files/2450820(1)" width="24" height="24" alt="@informramiz" data-hovercard-user-id="2450820">
            <a data-hovercard-user-id="2450820" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/informramiz" aria-describedby="hovercard-aria-description">informramiz</a>
          </li>
      </ul>
    </div>
  </div>



  <div class="file">
    <div class="file-header">
  <div class="file-actions">

    <div class="BtnGroup">
      <a id="raw-url" class="btn btn-sm BtnGroup-item" href="https://github.com/informramiz/opencv-face-recognition-python/raw/master/README.md">Raw</a>
        <a class="btn btn-sm js-update-url-with-hash BtnGroup-item" data-hotkey="b" href="https://github.com/informramiz/opencv-face-recognition-python/blame/master/README.md">Blame</a>
      <a rel="nofollow" class="btn btn-sm BtnGroup-item" href="https://github.com/informramiz/opencv-face-recognition-python/commits/master/README.md">History</a>
    </div>

        <a class="btn-octicon tooltipped tooltipped-nw" href="x-github-client://openRepo/https://github.com/informramiz/opencv-face-recognition-python?branch=master&amp;filepath=README.md" aria-label="Open this file in GitHub Desktop" data-ga-click="Repository, open with desktop, type:mac">
            <svg class="octicon octicon-device-desktop" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M15 2H1c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h5.34c-.25.61-.86 1.39-2.34 2h8c-1.48-.61-2.09-1.39-2.34-2H15c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm0 9H1V3h14v8z"></path></svg>
        </a>

          <!-- '"` --><!-- </textarea></xmp> --><form class="inline-form js-update-url-with-hash" action="https://github.com/informramiz/opencv-face-recognition-python/edit/master/README.md" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="✓"><input type="hidden" name="authenticity_token" value="Wo872hWBhDB4c8/PcFG+xLTpsO5FvZ20yxaQ06K3vBi/CIlmUsRpOxtQI6bUu0EfhufHTa7zNfKJJe2m1WJ00g==">
            <button class="btn-octicon tooltipped tooltipped-nw" type="submit" aria-label="Fork this project and edit the file" data-hotkey="e" data-disable-with="">
              <svg class="octicon octicon-pencil" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M0 12v3h3l8-8-3-3-8 8zm3 2H1v-2h1v1h1v1zm10.3-9.3L12 6 9 3l1.3-1.3a.996.996 0 0 1 1.41 0l1.59 1.59c.39.39.39 1.02 0 1.41z"></path></svg>
            </button>
</form>
        <!-- '"` --><!-- </textarea></xmp> --><form class="inline-form" action="https://github.com/informramiz/opencv-face-recognition-python/delete/master/README.md" accept-charset="UTF-8" method="post"><input name="utf8" type="hidden" value="✓"><input type="hidden" name="authenticity_token" value="shz90wsUMNokSNcrIh10j8UdnG7yMF9dXRrzn/7ZAatmluaY9Rsoyez5gw2SumogT/OwkYErWTqZnVz2W6UA+w==">
          <button class="btn-octicon btn-octicon-danger tooltipped tooltipped-nw" type="submit" aria-label="Fork this project and delete the file" data-disable-with="">
            <svg class="octicon octicon-trashcan" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M11 2H9c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1H2c-.55 0-1 .45-1 1v1c0 .55.45 1 1 1v9c0 .55.45 1 1 1h7c.55 0 1-.45 1-1V5c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm-1 12H3V5h1v8h1V5h1v8h1V5h1v8h1V5h1v9zm1-10H2V3h9v1z"></path></svg>
          </button>
</form>  </div>

  <div class="file-info">
      492 lines (325 sloc)
      <span class="file-info-divider"></span>
    28.7 KB
  </div>
</div>

    
  <div id="readme" class="readme blob instapaper_body">
    <article class="markdown-body entry-content" itemprop="text"><h1><a id="user-content-face-recognition-with-opencv-and-python" class="anchor" aria-hidden="true" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#face-recognition-with-opencv-and-python"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Face Recognition with OpenCV and Python</h1>
<h2><a id="user-content-introduction" class="anchor" aria-hidden="true" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#introduction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Introduction</h2>
<p>What is face recognition? Or what is recognition? When you look at an apple fruit, your mind immediately tells you that this is an apple fruit. This process, your mind telling you that this is an apple fruit is recognition in simple words. So what is face recognition then? I am sure you have guessed it right. When you look at your friend walking down the street or a picture of him, you recognize that he is your friend Paulo. Interestingly when you look at your friend or a picture of him you look at his face first before looking at anything else. Ever wondered why you do that? This is so that you can recognize him by looking at his face. Well, this is you doing face recognition.</p>
<p>But the real question is how does face recognition works? It is quite simple and intuitive. Take a real life example, when you meet someone first time in your life you don't recognize him, right? While he talks or shakes hands with you, you look at his face, eyes, nose, mouth, color and overall look. This is your mind learning or training for the face recognition of that person by gathering face data. Then he tells you that his name is Paulo. At this point your mind knows that the face data it just learned belongs to Paulo. Now your mind is trained and ready to do face recognition on Paulo's face. Next time when you will see Paulo or his face in a picture you will immediately recognize him. This is how face recognition work. The more you will meet Paulo, the more data your mind will collect about Paulo and especially his face and the better you will become at recognizing him.</p>
<p>Now the next question is how to code face recognition with OpenCV, after all this is the only reason why you are reading this article, right? OK then. You might say that our mind can do these things easily but to actually code them into a computer is difficult? Don't worry, it is not. Thanks to OpenCV, coding face recognition is as easier as it feels. The coding steps for face recognition are same as we discussed it in real life example above.</p>
<ul>
<li><strong>Training Data Gathering:</strong> Gather face data (face images in this case) of the persons you want to recognize</li>
<li><strong>Training of Recognizer:</strong> Feed that face data (and respective names of each face) to the face recognizer so that it can learn.</li>
<li><strong>Recognition:</strong> Feed new faces of the persons and see if the face recognizer you just trained recognizes them.</li>
</ul>
<p>OpenCV comes equipped with built in face recognizer, all you have to do is feed it the face data. It's that simple and this how it will look once we are done coding it.</p>
<p><a target="_blank" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/output/tom-shahrukh.png"><img src="./README.md_files/tom-shahrukh.png" alt="visualization" style="max-width:100%;"></a></p>
<h2><a id="user-content-opencv-face-recognizers" class="anchor" aria-hidden="true" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#opencv-face-recognizers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>OpenCV Face Recognizers</h2>
<p>OpenCV has three built in face recognizers and thanks to OpenCV's clean coding, you can use any of them by just changing a single line of code. Below are the names of those face recognizers and their OpenCV calls.</p>
<ol>
<li>EigenFaces Face Recognizer Recognizer - <code>cv2.face.createEigenFaceRecognizer()</code></li>
<li>FisherFaces Face Recognizer Recognizer - <code>cv2.face.createFisherFaceRecognizer()</code></li>
<li>Local Binary Patterns Histograms (LBPH) Face Recognizer - <code>cv2.face.createLBPHFaceRecognizer()</code></li>
</ol>
<p>We have got three face recognizers but do you know which one to use and when? Or which one is better? I guess not. So why not go through a brief summary of each, what you say? I am assuming you said yes :) So let's dive into the theory of each.</p>
<h3><a id="user-content-eigenfaces-face-recognizer" class="anchor" aria-hidden="true" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#eigenfaces-face-recognizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>EigenFaces Face Recognizer</h3>
<p>This algorithm considers the fact that not all parts of a face are equally important and equally useful. When you look at some one you recognize him/her by his distinct features like eyes, nose, cheeks, forehead and how they vary with respect to each other. So you are actually focusing on the areas of maximum change (mathematically speaking, this change is variance) of the face. For example, from eyes to nose there is a significant change and same is the case from nose to mouth. When you look at multiple faces you compare them by looking at these parts of the faces because these parts are the most useful and important components of a face. Important because they catch the maximum change among faces, change the helps you differentiate one face from the other. This is exactly how EigenFaces face recognizer works.</p>
<p>EigenFaces face recognizer looks at all the training images of all the persons as a whole and try to extract the components which are important and useful (the components that catch the maximum variance/change) and discards the rest of the components. This way it not only extracts the important components from the training data but also saves memory by discarding the less important components. These important components it extracts are called <strong>principal components</strong>. Below is an image showing the principal components extracted from a list of faces.</p>
<p><strong>Principal Components</strong>
<a target="_blank" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/visualization/eigenfaces_opencv.png"><img src="./README.md_files/eigenfaces_opencv.png" alt="eigenfaces_opencv" style="max-width:100%;"></a>
<strong><a href="http://docs.opencv.org/2.4/modules/contrib/doc/facerec/facerec_tutorial.html" rel="nofollow">source</a></strong></p>
<p>You can see that principal components actually represent faces and these faces are called <strong>eigen faces</strong> and hence the name of the algorithm.</p>
<p>So this is how EigenFaces face recognizer trains itself (by extracting principal components). Remember, it also keeps a record of which principal component belongs to which person. One thing to note in above image is that <strong>Eigenfaces algorithm also considers illumination as an important component</strong>.</p>
<p>Later during recognition, when you feed a new image to the algorithm, it repeats the same process on that image as well. It extracts the principal component from that new image and compares that component with the list of components it stored during training and finds the component with the best match and returns the person label associated with that best match component.</p>
<p>Easy peasy, right? Next one is easier than this one.</p>
<h3><a id="user-content-fisherfaces-face-recognizer" class="anchor" aria-hidden="true" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#fisherfaces-face-recognizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>FisherFaces Face Recognizer</h3>
<p>This algorithm is an improved version of EigenFaces face recognizer. Eigenfaces face recognizer looks at all the training faces of all the persons at once and finds principal components from all of them combined. By capturing principal components from all the of them combined you are not focusing on the features that discriminate one person from the other but the features that represent all the persons in the training data as a whole.</p>
<p>This approach has drawbacks, for example, <strong>images with sharp changes (like light changes which is not a useful feature at all) may dominate the rest of the images</strong> and you may end up with features that are from external source like light and are not useful for discrimination at all. In the end, your principal components will represent light changes and not the actual face features.</p>
<p>Fisherfaces algorithm, instead of extracting useful features that represent all the faces of all the persons, it extracts useful features that discriminate one person from the others. This way features of one person do not dominate over the others and you have the features that discriminate one person from the others.</p>
<p>Below is an image of features extracted using Fisherfaces algorithm.</p>
<p><strong>Fisher Faces</strong>
<a target="_blank" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/visualization/fisherfaces_opencv.png"><img src="./README.md_files/fisherfaces_opencv.png" alt="eigenfaces_opencv" style="max-width:100%;"></a>
<strong><a href="http://docs.opencv.org/2.4/modules/contrib/doc/facerec/facerec_tutorial.html" rel="nofollow">source</a></strong></p>
<p>You can see that features extracted actually represent faces and these faces are called <strong>fisher faces</strong> and hence the name of the algorithm.</p>
<p>One thing to note here is that <strong>even in Fisherfaces algorithm if multiple persons have images with sharp changes due to external sources like light they will dominate over other features and affect recognition accuracy</strong>.</p>
<p>Getting bored with this theory? Don't worry, only one face recognizer is left and then we will dive deep into the coding part.</p>
<h3><a id="user-content-local-binary-patterns-histograms-lbph-face-recognizer" class="anchor" aria-hidden="true" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#local-binary-patterns-histograms-lbph-face-recognizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Local Binary Patterns Histograms (LBPH) Face Recognizer</h3>
<p>I wrote a detailed explaination on Local Binary Patterns Histograms in my previous article on <a href="https://www.superdatascience.com/opencv-face-detection/" rel="nofollow">face detection</a> using local binary patterns histograms. So here I will just give a brief overview of how it works.</p>
<p>We know that Eigenfaces and Fisherfaces are both affected by light and in real life we can't guarantee perfect light conditions. LBPH face recognizer is an improvement to overcome this drawback.</p>
<p>Idea is to not look at the image as a whole instead find the local features of an image. LBPH alogrithm try to find the local structure of an image and it does that by comparing each pixel with its neighboring pixels.</p>
<p>Take a 3x3 window and move it one image, at each move (each local part of an image), compare the pixel at the center with its neighbor pixels. The neighbors with intensity value less than or equal to center pixel are denoted by 1 and others by 0. Then you read these 0/1 values under 3x3 window in a clockwise order and you will have a binary pattern like 11100011 and this pattern is local to some area of the image. You do this on whole image and you will have a list of local binary patterns.</p>
<p><strong>LBP Labeling</strong>
<a target="_blank" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/visualization/lbp-labeling.png"><img src="./README.md_files/lbp-labeling.png" alt="LBP labeling" style="max-width:100%;"></a></p>
<p>Now you get why this algorithm has Local Binary Patterns in its name? Because you get a list of local binary patterns. Now you may be wondering, what about the histogram part of the LBPH? Well after you get a list of local binary patterns, you convert each binary pattern into a decimal number (as shown in above image) and then you make a <a href="https://www.mathsisfun.com/data/histograms.html" rel="nofollow">histogram</a> of all of those values. A sample histogram looks like this.</p>
<p><strong>Sample Histogram</strong>
<a target="_blank" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/visualization/histogram.png"><img src="./README.md_files/histogram.png" alt="LBP labeling" style="max-width:100%;"></a></p>
<p>I guess this answers the question about histogram part. So in the end you will have <strong>one histogram for each face</strong> image in the training data set. That means if there were 100 images in training data set then LBPH will extract 100 histograms after training and store them for later recognition. Remember, <strong>algorithm also keeps track of which histogram belongs to which person</strong>.</p>
<p>Later during recognition, when you will feed a new image to the recognizer for recognition it will generate a histogram for that new image, compare that histogram with the histograms it already has, find the best match histogram and return the person label associated with that best match histogram.
<br><br>
Below is a list of faces and their respective local binary patterns images. You can see that the LBP images are not affected by changes in light conditions.</p>
<p><strong>LBP Faces</strong>
<a target="_blank" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/visualization/lbph-faces.jpg"><img src="./README.md_files/lbph-faces.jpg" alt="LBP faces" style="max-width:100%;"></a>
<strong><a href="http://docs.opencv.org/2.4/modules/contrib/doc/facerec/facerec_tutorial.html" rel="nofollow">source</a></strong></p>
<p>The theory part is over and now comes the coding part! Ready to dive into coding? Let's get into it then.</p>
<h1><a id="user-content-coding-face-recognition-with-opencv" class="anchor" aria-hidden="true" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#coding-face-recognition-with-opencv"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Coding Face Recognition with OpenCV</h1>
<p>The Face Recognition process in this tutorial is divided into three steps.</p>
<ol>
<li><strong>Prepare training data:</strong> In this step we will read training images for each person/subject along with their labels, detect faces from each image and assign each detected face an integer label of the person it belongs to.</li>
<li><strong>Train Face Recognizer:</strong> In this step we will train OpenCV's LBPH face recognizer by feeding it the data we prepared in step 1.</li>
<li><strong>Testing:</strong> In this step we will pass some test images to face recognizer and see if it predicts them correctly.</li>
</ol>
<p><strong>[There should be a visualization diagram for above steps here]</strong></p>
<p>To detect faces, I will use the code from my previous article on <a href="https://www.superdatascience.com/opencv-face-detection/" rel="nofollow">face detection</a>. So if you have not read it, I encourage you to do so to understand how face detection works and its Python coding.</p>
<h3><a id="user-content-import-required-modules" class="anchor" aria-hidden="true" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#import-required-modules"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Import Required Modules</h3>
<p>Before starting the actual coding we need to import the required modules for coding. So let's import them first.</p>
<ul>
<li><strong>cv2:</strong> is <em>OpenCV</em> module for Python which we will use for face detection and face recognition.</li>
<li><strong>os:</strong> We will use this Python module to read our training directories and file names.</li>
<li><strong>numpy:</strong> We will use this module to convert Python lists to numpy arrays as OpenCV face recognizers accept numpy arrays.</li>
</ul>
<div class="highlight highlight-source-python"><pre><span class="pl-c"><span class="pl-c">#</span>import OpenCV module</span>
<span class="pl-k">import</span> cv2
<span class="pl-c"><span class="pl-c">#</span>import os module for reading training data directories and paths</span>
<span class="pl-k">import</span> os
<span class="pl-c"><span class="pl-c">#</span>import numpy to convert python lists to numpy arrays as </span>
<span class="pl-c"><span class="pl-c">#</span>it is needed by OpenCV face recognizers</span>
<span class="pl-k">import</span> numpy <span class="pl-k">as</span> np

<span class="pl-c"><span class="pl-c">#</span>matplotlib for display our images</span>
<span class="pl-k">import</span> matplotlib.pyplot <span class="pl-k">as</span> plt
<span class="pl-k">%</span>matplotlib inline </pre></div>
<h3><a id="user-content-training-data" class="anchor" aria-hidden="true" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#training-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Training Data</h3>
<p>The more images used in training the better. Normally a lot of images are used for training a face recognizer so that it can learn different looks of the same person, for example with glasses, without glasses, laughing, sad, happy, crying, with beard, without beard etc. To keep our tutorial simple we are going to use only 12 images for each person.</p>
<p>So our training data consists of total 2 persons with 12 images of each person. All training data is inside <em><code>training-data</code></em> folder. <em><code>training-data</code></em> folder contains one folder for each person and <strong>each folder is named with format <code>sLabel (e.g. s1, s2)</code> where label is actually the integer label assigned to that person</strong>. For example folder named s1 means that this folder contains images for person 1. The directory structure tree for training data is as follows:</p>
<pre><code>training-data
|-------------- s1
|               |-- 1.jpg
|               |-- ...
|               |-- 12.jpg
|-------------- s2
|               |-- 1.jpg
|               |-- ...
|               |-- 12.jpg
</code></pre>
<p>The <em><code>test-data</code></em> folder contains images that we will use to test our face recognizer after it has been successfully trained.</p>
<p>As OpenCV face recognizer accepts labels as integers so we need to define a mapping between integer labels and persons actual names so below I am defining a mapping of persons integer labels and their respective names.</p>
<p><strong>Note:</strong> As we have not assigned <code>label 0</code> to any person so <strong>the mapping for label 0 is empty</strong>.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c"><span class="pl-c">#</span>there is no label 0 in our training data so subject name for index/label 0 is empty</span>
subjects <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Tom Cruise<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Shahrukh Khan<span class="pl-pds">"</span></span>]</pre></div>
<h3><a id="user-content-prepare-training-data" class="anchor" aria-hidden="true" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#prepare-training-data"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Prepare training data</h3>
<p>You may be wondering why data preparation, right? Well, OpenCV face recognizer accepts data in a specific format. It accepts two vectors, one vector is of faces of all the persons and the second vector is of integer labels for each face so that when processing a face the face recognizer knows which person that particular face belongs too.</p>
<p>For example, if we had 2 persons and 2 images for each person.</p>
<pre><code>PERSON-1    PERSON-2   

img1        img1         
img2        img2
</code></pre>
<p>Then the prepare data step will produce following face and label vectors.</p>
<pre><code>FACES                        LABELS

person1_img1_face              1
person1_img2_face              1
person2_img1_face              2
person2_img2_face              2
</code></pre>
<p>Preparing data step can be further divided into following sub-steps.</p>
<ol>
<li>Read all the folder names of subjects/persons provided in training data folder. So for example, in this tutorial we have folder names: <code>s1, s2</code>.</li>
<li>For each subject, extract label number. <strong>Do you remember that our folders have a special naming convention?</strong> Folder names follow the format <code>sLabel</code> where <code>Label</code> is an integer representing the label we have assigned to that subject. So for example, folder name <code>s1</code> means that the subject has label 1, s2 means subject label is 2 and so on. The label extracted in this step is assigned to each face detected in the next step.</li>
<li>Read all the images of the subject, detect face from each image.</li>
<li>Add each face to faces vector with corresponding subject label (extracted in above step) added to labels vector.</li>
</ol>
<p><strong>[There should be a visualization for above steps here]</strong></p>
<p>Did you read my last article on <a href="https://www.superdatascience.com/opencv-face-detection/" rel="nofollow">face detection</a>? No? Then you better do so right now because to detect faces, I am going to use the code from my previous article on <a href="https://www.superdatascience.com/opencv-face-detection/" rel="nofollow">face detection</a>. So if you have not read it, I encourage you to do so to understand how face detection works and its coding. Below is the same code.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c"><span class="pl-c">#</span>function to detect face using OpenCV</span>
<span class="pl-k">def</span> <span class="pl-en">detect_face</span>(<span class="pl-smi">img</span>):
    <span class="pl-c"><span class="pl-c">#</span>convert the test image to gray image as opencv face detector expects gray images</span>
    gray <span class="pl-k">=</span> cv2.cvtColor(img, cv2.<span class="pl-c1">COLOR_BGR2GRAY</span>)
    
    <span class="pl-c"><span class="pl-c">#</span>load OpenCV face detector, I am using LBP which is fast</span>
    <span class="pl-c"><span class="pl-c">#</span>there is also a more accurate but slow Haar classifier</span>
    face_cascade <span class="pl-k">=</span> cv2.CascadeClassifier(<span class="pl-s"><span class="pl-pds">'</span>opencv-files/lbpcascade_frontalface.xml<span class="pl-pds">'</span></span>)

    <span class="pl-c"><span class="pl-c">#</span>let's detect multiscale (some images may be closer to camera than others) images</span>
    <span class="pl-c"><span class="pl-c">#</span>result is a list of faces</span>
    faces <span class="pl-k">=</span> face_cascade.detectMultiScale(gray, <span class="pl-v">scaleFactor</span><span class="pl-k">=</span><span class="pl-c1">1.2</span>, <span class="pl-v">minNeighbors</span><span class="pl-k">=</span><span class="pl-c1">5</span>)<span class="pl-bu">;</span>
    
    <span class="pl-c"><span class="pl-c">#</span>if no faces are detected then return original img</span>
    <span class="pl-k">if</span> (<span class="pl-c1">len</span>(faces) <span class="pl-k">==</span> <span class="pl-c1">0</span>):
        <span class="pl-k">return</span> <span class="pl-c1">None</span>, <span class="pl-c1">None</span>
    
    <span class="pl-c"><span class="pl-c">#</span>under the assumption that there will be only one face,</span>
    <span class="pl-c"><span class="pl-c">#</span>extract the face area</span>
    (x, y, w, h) <span class="pl-k">=</span> faces[<span class="pl-c1">0</span>]
    
    <span class="pl-c"><span class="pl-c">#</span>return only the face part of the image</span>
    <span class="pl-k">return</span> gray[y:y<span class="pl-k">+</span>w, x:x<span class="pl-k">+</span>h], faces[<span class="pl-c1">0</span>]</pre></div>
<p>I am using OpenCV's <strong>LBP face detector</strong>. On <em>line 4</em>, I convert the image to grayscale because most operations in OpenCV are performed in gray scale, then on <em>line 8</em> I load LBP face detector using <code>cv2.CascadeClassifier</code> class. After that on <em>line 12</em> I use <code>cv2.CascadeClassifier</code> class' <code>detectMultiScale</code> method to detect all the faces in the image. on <em>line 20</em>, from detected faces I only pick the first face because in one image there will be only one face (under the assumption that there will be only one prominent face). As faces returned by <code>detectMultiScale</code> method are actually rectangles (x, y, width, height) and not actual faces images so we have to extract face image area from the main image. So on <em>line 23</em> I extract face area from gray image and return both the face image area and face rectangle.</p>
<p>Now you have got a face detector and you know the 4 steps to prepare the data, so are you ready to code the prepare data step? Yes? So let's do it.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c"><span class="pl-c">#</span>this function will read all persons' training images, detect face from each image</span>
<span class="pl-c"><span class="pl-c">#</span>and will return two lists of exactly same size, one list </span>
<span class="pl-c"><span class="pl-c">#</span> of faces and another list of labels for each face</span>
<span class="pl-k">def</span> <span class="pl-en">prepare_training_data</span>(<span class="pl-smi">data_folder_path</span>):
    
    <span class="pl-c"><span class="pl-c">#</span>------STEP-1--------</span>
    <span class="pl-c"><span class="pl-c">#</span>get the directories (one directory for each subject) in data folder</span>
    dirs <span class="pl-k">=</span> os.listdir(data_folder_path)
    
    <span class="pl-c"><span class="pl-c">#</span>list to hold all subject faces</span>
    faces <span class="pl-k">=</span> []
    <span class="pl-c"><span class="pl-c">#</span>list to hold labels for all subjects</span>
    labels <span class="pl-k">=</span> []
    
    <span class="pl-c"><span class="pl-c">#</span>let's go through each directory and read images within it</span>
    <span class="pl-k">for</span> dir_name <span class="pl-k">in</span> dirs:
        
        <span class="pl-c"><span class="pl-c">#</span>our subject directories start with letter 's' so</span>
        <span class="pl-c"><span class="pl-c">#</span>ignore any non-relevant directories if any</span>
        <span class="pl-k">if</span> <span class="pl-k">not</span> dir_name.startswith(<span class="pl-s"><span class="pl-pds">"</span>s<span class="pl-pds">"</span></span>):
            <span class="pl-k">continue</span><span class="pl-bu">;</span>
            
        <span class="pl-c"><span class="pl-c">#</span>------STEP-2--------</span>
        <span class="pl-c"><span class="pl-c">#</span>extract label number of subject from dir_name</span>
        <span class="pl-c"><span class="pl-c">#</span>format of dir name = slabel</span>
        <span class="pl-c"><span class="pl-c">#</span>, so removing letter 's' from dir_name will give us label</span>
        label <span class="pl-k">=</span> <span class="pl-c1">int</span>(dir_name.replace(<span class="pl-s"><span class="pl-pds">"</span>s<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>))
        
        <span class="pl-c"><span class="pl-c">#</span>build path of directory containin images for current subject subject</span>
        <span class="pl-c"><span class="pl-c">#</span>sample subject_dir_path = "training-data/s1"</span>
        subject_dir_path <span class="pl-k">=</span> data_folder_path <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span> <span class="pl-k">+</span> dir_name
        
        <span class="pl-c"><span class="pl-c">#</span>get the images names that are inside the given subject directory</span>
        subject_images_names <span class="pl-k">=</span> os.listdir(subject_dir_path)
        
        <span class="pl-c"><span class="pl-c">#</span>------STEP-3--------</span>
        <span class="pl-c"><span class="pl-c">#</span>go through each image name, read image, </span>
        <span class="pl-c"><span class="pl-c">#</span>detect face and add face to list of faces</span>
        <span class="pl-k">for</span> image_name <span class="pl-k">in</span> subject_images_names:
            
            <span class="pl-c"><span class="pl-c">#</span>ignore system files like .DS_Store</span>
            <span class="pl-k">if</span> image_name.startswith(<span class="pl-s"><span class="pl-pds">"</span>.<span class="pl-pds">"</span></span>):
                <span class="pl-k">continue</span><span class="pl-bu">;</span>
            
            <span class="pl-c"><span class="pl-c">#</span>build image path</span>
            <span class="pl-c"><span class="pl-c">#</span>sample image path = training-data/s1/1.pgm</span>
            image_path <span class="pl-k">=</span> subject_dir_path <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>/<span class="pl-pds">"</span></span> <span class="pl-k">+</span> image_name

            <span class="pl-c"><span class="pl-c">#</span>read image</span>
            image <span class="pl-k">=</span> cv2.imread(image_path)
            
            <span class="pl-c"><span class="pl-c">#</span>display an image window to show the image </span>
            cv2.imshow(<span class="pl-s"><span class="pl-pds">"</span>Training on image...<span class="pl-pds">"</span></span>, image)
            cv2.waitKey(<span class="pl-c1">100</span>)
            
            <span class="pl-c"><span class="pl-c">#</span>detect face</span>
            face, rect <span class="pl-k">=</span> detect_face(image)
            
            <span class="pl-c"><span class="pl-c">#</span>------STEP-4--------</span>
            <span class="pl-c"><span class="pl-c">#</span>for the purpose of this tutorial</span>
            <span class="pl-c"><span class="pl-c">#</span>we will ignore faces that are not detected</span>
            <span class="pl-k">if</span> face <span class="pl-k">is</span> <span class="pl-k">not</span> <span class="pl-c1">None</span>:
                <span class="pl-c"><span class="pl-c">#</span>add face to list of faces</span>
                faces.append(face)
                <span class="pl-c"><span class="pl-c">#</span>add label for this face</span>
                labels.append(label)
            
    cv2.destroyAllWindows()
    cv2.waitKey(<span class="pl-c1">1</span>)
    cv2.destroyAllWindows()
    
    <span class="pl-k">return</span> faces, labels</pre></div>
<p>I have defined a function that takes the path, where training subjects' folders are stored, as parameter. This function follows the same 4 prepare data substeps mentioned above.</p>
<p><strong>(step-1)</strong> On <em>line 8</em> I am using <code>os.listdir</code> method to read names of all folders stored on path passed to function as parameter. On <em>line 10-13</em> I am defining labels and faces vectors.</p>
<p><strong>(step-2)</strong> After that I traverse through all subjects' folder names and from each subject's folder name on <em>line 27</em> I am extracting the label information. As folder names follow the <code>sLabel</code> naming convention so removing the  letter <code>s</code> from folder name will give us the label assigned to that subject.</p>
<p><strong>(step-3)</strong> On <em>line 34</em>, I read all the images names of of the current subject being traversed and on <em>line 39-66</em> I traverse those images one by one. On <em>line 53-54</em> I am using OpenCV's <code>imshow(window_title, image)</code> along with OpenCV's <code>waitKey(interval)</code> method to display the current image being traveresed. The <code>waitKey(interval)</code> method pauses the code flow for the given interval (milliseconds), I am using it with 100ms interval so that we can view the image window for 100ms. On <em>line 57</em>, I detect face from the current image being traversed.</p>
<p><strong>(step-4)</strong> On <em>line 62-66</em>, I add the detected face and label to their respective vectors.</p>
<p>But a function can't do anything unless we call it on some data that it has to prepare, right? Don't worry, I have got data of two beautiful and famous celebrities. I am sure you will recognize them!</p>
<p><a target="_blank" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/visualization/tom-shahrukh.png"><img src="./README.md_files/tom-shahrukh(1).png" alt="training-data" style="max-width:100%;"></a></p>
<p>Let's call this function on images of these beautiful celebrities to prepare data for training of our Face Recognizer. Below is a simple code to do that.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c"><span class="pl-c">#</span>let's first prepare our training data</span>
<span class="pl-c"><span class="pl-c">#</span>data will be in two lists of same size</span>
<span class="pl-c"><span class="pl-c">#</span>one list will contain all the faces</span>
<span class="pl-c"><span class="pl-c">#</span>and other list will contain respective labels for each face</span>
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Preparing data...<span class="pl-pds">"</span></span>)
faces, labels <span class="pl-k">=</span> prepare_training_data(<span class="pl-s"><span class="pl-pds">"</span>training-data<span class="pl-pds">"</span></span>)
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Data prepared<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span>print total faces and labels</span>
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Total faces: <span class="pl-pds">"</span></span>, <span class="pl-c1">len</span>(faces))
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Total labels: <span class="pl-pds">"</span></span>, <span class="pl-c1">len</span>(labels))</pre></div>
<pre><code>Preparing data...
Data prepared
Total faces:  23
Total labels:  23
</code></pre>
<p>This was probably the boring part, right? Don't worry, the fun stuff is coming up next. It's time to train our own face recognizer so that once trained it can recognize new faces of the persons it was trained on. Read? Ok then let's train our face recognizer.</p>
<h3><a id="user-content-train-face-recognizer" class="anchor" aria-hidden="true" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#train-face-recognizer"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Train Face Recognizer</h3>
<p>As we know, OpenCV comes equipped with three face recognizers.</p>
<ol>
<li>EigenFace Recognizer: This can be created with <code>cv2.face.createEigenFaceRecognizer()</code></li>
<li>FisherFace Recognizer: This can be created with <code>cv2.face.createFisherFaceRecognizer()</code></li>
<li>Local Binary Patterns Histogram (LBPH): This can be created with <code>cv2.face.LBPHFisherFaceRecognizer()</code></li>
</ol>
<p>I am going to use LBPH face recognizer but you can use any face recognizer of your choice. No matter which of the OpenCV's face recognizer you use the code will remain the same. You just have to change one line, the face recognizer initialization line given below.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c"><span class="pl-c">#</span>create our LBPH face recognizer </span>
face_recognizer <span class="pl-k">=</span> cv2.face.createLBPHFaceRecognizer()

<span class="pl-c"><span class="pl-c">#</span>or use EigenFaceRecognizer by replacing above line with </span>
<span class="pl-c"><span class="pl-c">#</span>face_recognizer = cv2.face.createEigenFaceRecognizer()</span>

<span class="pl-c"><span class="pl-c">#</span>or use FisherFaceRecognizer by replacing above line with </span>
<span class="pl-c"><span class="pl-c">#</span>face_recognizer = cv2.face.createFisherFaceRecognizer()</span></pre></div>
<p>Now that we have initialized our face recognizer and we also have prepared our training data, it's time to train the face recognizer. We will do that by calling the <code>train(faces-vector, labels-vector)</code> method of face recognizer.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c"><span class="pl-c">#</span>train our face recognizer of our training faces</span>
face_recognizer.train(faces, np.array(labels))</pre></div>
<p><strong>Did you notice</strong> that instead of passing <code>labels</code> vector directly to face recognizer I am first converting it to <strong>numpy</strong> array? This is because OpenCV expects labels vector to be a <code>numpy</code> array.</p>
<p>Still not satisfied? Want to see some action? Next step is the real action, I promise!</p>
<h3><a id="user-content-prediction" class="anchor" aria-hidden="true" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#prediction"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Prediction</h3>
<p>Now comes my favorite part, the prediction part. This is where we actually get to see if our algorithm is actually recognizing our trained subjects's faces or not. We will take two test images of our celeberities, detect faces from each of them and then pass those faces to our trained face recognizer to see if it recognizes them.</p>
<p>Below are some utility functions that we will use for drawing bounding box (rectangle) around face and putting celeberity name near the face bounding box.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c"><span class="pl-c">#</span>function to draw rectangle on image </span>
<span class="pl-c"><span class="pl-c">#</span>according to given (x, y) coordinates and </span>
<span class="pl-c"><span class="pl-c">#</span>given width and heigh</span>
<span class="pl-k">def</span> <span class="pl-en">draw_rectangle</span>(<span class="pl-smi">img</span>, <span class="pl-smi">rect</span>):
    (x, y, w, h) <span class="pl-k">=</span> rect
    cv2.rectangle(img, (x, y), (x<span class="pl-k">+</span>w, y<span class="pl-k">+</span>h), (<span class="pl-c1">0</span>, <span class="pl-c1">255</span>, <span class="pl-c1">0</span>), <span class="pl-c1">2</span>)
    
<span class="pl-c"><span class="pl-c">#</span>function to draw text on give image starting from</span>
<span class="pl-c"><span class="pl-c">#</span>passed (x, y) coordinates. </span>
<span class="pl-k">def</span> <span class="pl-en">draw_text</span>(<span class="pl-smi">img</span>, <span class="pl-smi">text</span>, <span class="pl-smi">x</span>, <span class="pl-smi">y</span>):
    cv2.putText(img, text, (x, y), cv2.<span class="pl-c1">FONT_HERSHEY_PLAIN</span>, <span class="pl-c1">1.5</span>, (<span class="pl-c1">0</span>, <span class="pl-c1">255</span>, <span class="pl-c1">0</span>), <span class="pl-c1">2</span>)</pre></div>
<p>First function <code>draw_rectangle</code> draws a rectangle on image based on passed rectangle coordinates. It uses OpenCV's built in function <code>cv2.rectangle(img, topLeftPoint, bottomRightPoint, rgbColor, lineWidth)</code> to draw rectangle. We will use it to draw a rectangle around the face detected in test image.</p>
<p>Second function <code>draw_text</code> uses OpenCV's built in function <code>cv2.putText(img, text, startPoint, font, fontSize, rgbColor, lineWidth)</code> to draw text on image.</p>
<p>Now that we have the drawing functions, we just need to call the face recognizer's <code>predict(face)</code> method to test our face recognizer on test images. Following function does the prediction for us.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c"><span class="pl-c">#</span>this function recognizes the person in image passed</span>
<span class="pl-c"><span class="pl-c">#</span>and draws a rectangle around detected face with name of the </span>
<span class="pl-c"><span class="pl-c">#</span>subject</span>
<span class="pl-k">def</span> <span class="pl-en">predict</span>(<span class="pl-smi">test_img</span>):
    <span class="pl-c"><span class="pl-c">#</span>make a copy of the image as we don't want to chang original image</span>
    img <span class="pl-k">=</span> test_img.copy()
    <span class="pl-c"><span class="pl-c">#</span>detect face from the image</span>
    face, rect <span class="pl-k">=</span> detect_face(img)

    <span class="pl-c"><span class="pl-c">#</span>predict the image using our face recognizer </span>
    label<span class="pl-k">=</span> face_recognizer.predict(face)
    <span class="pl-c"><span class="pl-c">#</span>get name of respective label returned by face recognizer</span>
    label_text <span class="pl-k">=</span> subjects[label]
    
    <span class="pl-c"><span class="pl-c">#</span>draw a rectangle around face detected</span>
    draw_rectangle(img, rect)
    <span class="pl-c"><span class="pl-c">#</span>draw name of predicted person</span>
    draw_text(img, label_text, rect[<span class="pl-c1">0</span>], rect[<span class="pl-c1">1</span>]<span class="pl-k">-</span><span class="pl-c1">5</span>)
    
    <span class="pl-k">return</span> img</pre></div>
<ul>
<li><strong>line-6</strong> read the test image</li>
<li><strong>line-7</strong> detect face from test image</li>
<li><strong>line-11</strong> recognize the face by calling face recognizer's <code>predict(face)</code> method. This method will return a lable</li>
<li><strong>line-12</strong> get the name associated with the label</li>
<li><strong>line-16</strong> draw rectangle around the detected face</li>
<li><strong>line-18</strong> draw name of predicted subject above face rectangle</li>
</ul>
<p>Now that we have the prediction function well defined, next step is to actually call this function on our test images and display those test images to see if our face recognizer correctly recognized them. So let's do it. This is what we have been waiting for.</p>
<div class="highlight highlight-source-python"><pre><span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Predicting images...<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span>load test images</span>
test_img1 <span class="pl-k">=</span> cv2.imread(<span class="pl-s"><span class="pl-pds">"</span>test-data/test1.jpg<span class="pl-pds">"</span></span>)
test_img2 <span class="pl-k">=</span> cv2.imread(<span class="pl-s"><span class="pl-pds">"</span>test-data/test2.jpg<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span>perform a prediction</span>
predicted_img1 <span class="pl-k">=</span> predict(test_img1)
predicted_img2 <span class="pl-k">=</span> predict(test_img2)
<span class="pl-c1">print</span>(<span class="pl-s"><span class="pl-pds">"</span>Prediction complete<span class="pl-pds">"</span></span>)

<span class="pl-c"><span class="pl-c">#</span>create a figure of 2 plots (one for each test image)</span>
f, (ax1, ax2) <span class="pl-k">=</span> plt.subplots(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-v">figsize</span><span class="pl-k">=</span>(<span class="pl-c1">10</span>, <span class="pl-c1">5</span>))

<span class="pl-c"><span class="pl-c">#</span>display test image1 result</span>
ax1.imshow(cv2.cvtColor(predicted_img1, cv2.<span class="pl-c1">COLOR_BGR2RGB</span>))

<span class="pl-c"><span class="pl-c">#</span>display test image2 result</span>
ax2.imshow(cv2.cvtColor(predicted_img2, cv2.<span class="pl-c1">COLOR_BGR2RGB</span>))

<span class="pl-c"><span class="pl-c">#</span>display both images</span>
cv2.imshow(<span class="pl-s"><span class="pl-pds">"</span>Tom cruise test<span class="pl-pds">"</span></span>, predicted_img1)
cv2.imshow(<span class="pl-s"><span class="pl-pds">"</span>Shahrukh Khan test<span class="pl-pds">"</span></span>, predicted_img2)
cv2.waitKey(<span class="pl-c1">0</span>)
cv2.destroyAllWindows()
cv2.waitKey(<span class="pl-c1">1</span>)
cv2.destroyAllWindows()</pre></div>
<pre><code>Predicting images...
Prediction complete
</code></pre>
<p><a target="_blank" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/output_43_1.png"><img src="./README.md_files/output_43_1.png" alt="png" style="max-width:100%;"></a></p>
<p>wohooo! Is'nt it beautiful? Indeed, it is!</p>
<h2><a id="user-content-end-notes" class="anchor" aria-hidden="true" href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md#end-notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>End Notes</h2>
<p>Face Recognition is a fascinating idea to work on and OpenCV has made it extremely simple and easy for us to code it. It just takes a few lines of code to have a fully working face recognition application and we can switch between all three face recognizers with a single line of code change. It's that simple.</p>
<p>Although EigenFaces, FisherFaces and LBPH face recognizers are good but there are even better ways to perform face recognition like using Histogram of Oriented Gradients (HOGs) and Neural Networks. So the more advanced face recognition algorithms are now a days implemented using a combination of OpenCV and Machine learning. I have plans to write some articles on those more advanced methods as well, so stay tuned!</p>
<div class="highlight highlight-source-python"><pre></pre></div>
</article>
  </div>

  </div>

  <button type="button" data-facebox="#jump-to-line" data-facebox-class="linejump" data-hotkey="l" class="d-none">Jump to Line</button>
  <div id="jump-to-line" style="display:none">
    <!-- '"` --><!-- </textarea></xmp> --><form class="js-jump-to-line-form" action="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="✓">
      <input class="form-control linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line…" aria-label="Jump to line" autofocus="">
      <button type="submit" class="btn">Go</button>
</form>  </div>


  </div>
  <div class="modal-backdrop js-touch-events"></div>
</div></div>
  </div>

  </div>

      
<div class="footer container-lg px-3" role="contentinfo">
  <div class="position-relative d-flex flex-justify-between pt-6 pb-2 mt-6 f6 text-gray border-top border-gray-light ">
    <ul class="list-style-none d-flex flex-wrap ">
      <li class="mr-3">© 2018 <span title="0.26351s from unicorn-2040686824-lfxjg">GitHub</span>, Inc.</li>
        <li class="mr-3"><a data-ga-click="Footer, go to terms, text:terms" href="https://github.com/site/terms">Terms</a></li>
        <li class="mr-3"><a data-ga-click="Footer, go to privacy, text:privacy" href="https://github.com/site/privacy">Privacy</a></li>
        <li class="mr-3"><a href="https://help.github.com/articles/github-security/" data-ga-click="Footer, go to security, text:security">Security</a></li>
        <li class="mr-3"><a href="https://status.github.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
        <li><a data-ga-click="Footer, go to help, text:help" href="https://help.github.com/">Help</a></li>
    </ul>

    <a aria-label="Homepage" title="GitHub" class="footer-octicon" href="https://github.com/">
      <svg height="24" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="24" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"></path></svg>
</a>
   <ul class="list-style-none d-flex flex-wrap ">
        <li class="mr-3"><a data-ga-click="Footer, go to contact, text:contact" href="https://github.com/contact">Contact GitHub</a></li>
      <li class="mr-3"><a href="https://developer.github.com/" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li class="mr-3"><a href="https://training.github.com/" data-ga-click="Footer, go to training, text:training">Training</a></li>
      <li class="mr-3"><a href="https://shop.github.com/" data-ga-click="Footer, go to shop, text:shop">Shop</a></li>
        <li class="mr-3"><a href="https://blog.github.com/" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a data-ga-click="Footer, go to about, text:about" href="https://github.com/about">About</a></li>

    </ul>
  </div>
  <div class="d-flex flex-justify-center pb-6">
    <span class="f6 text-gray-light"></span>
  </div>
</div>



  <div id="ajax-error-message" class="ajax-error-message flash flash-error">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"></path></svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"></path></svg>
    </button>
    You can't perform that action at this time.
  </div>


    
    <script crossorigin="anonymous" integrity="sha512-gjdIIVyOYA3UaabSuKCQHZdLt84lLmROa87xIM/thAc9y+lnj7RHokXdWafFS0scIQFO9PQ5sGNXG0+MLRhw+Q==" type="application/javascript" src="./README.md_files/frameworks-c47d34e9e8c79abd667b6a6a0ff26e7b.js"></script>
    
    <script crossorigin="anonymous" async="async" integrity="sha512-QoRSvLZ8gKtFbqZVGgdrfbouqZxmsKQnXe3pFtFd1ZtfoJIVsRTLnhFI26PW/5ts/4Rrsf8jssqJCNVYCsCp7A==" type="application/javascript" src="./README.md_files/github-d19623a69cc756b5a2cbda89154a69e9.js"></script>
    
    
    
    
  <div class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner d-none">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"></path></svg>
    <span class="signed-in-tab-flash">You signed in with another tab or window. <a href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md">Reload</a> to refresh your session.</span>
    <span class="signed-out-tab-flash">You signed out in another tab or window. <a href="https://github.com/informramiz/opencv-face-recognition-python/blob/master/README.md">Reload</a> to refresh your session.</span>
  </div>
  <div class="facebox" id="facebox" style="display:none;">
  <div class="facebox-popup">
    <div class="facebox-content" role="dialog" aria-labelledby="facebox-header" aria-describedby="facebox-description">
    </div>
    <button type="button" class="facebox-close js-facebox-close" aria-label="Close modal">
      <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"></path></svg>
    </button>
  </div>
</div>

  <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;" tabindex="0">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box box-shadow-large" style="width:360px;"></div>
</div>

<div id="hovercard-aria-description" class="sr-only">
  Press h to open a hovercard with more details.
</div>


  


<script id="wappalyzer" src="chrome-extension://gppongmhjkpfnbhagpmjfkannfbllamg/js/inject.js"></script></body></html>